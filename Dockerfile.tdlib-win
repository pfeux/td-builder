# escape=`

ARG FROM_IMAGE=ghcr.io/pfeux/vstools:latest
FROM ${FROM_IMAGE} AS builder

# Reset the shell.
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Changes the directory to TEMP
# WORKDIR /TEMP

# # Download channel & setup files, install VC Build Tools
# RUN Invoke-WebRequest -Uri https://aka.ms/vs/17/release/channel -OutFile C:\TEMP\VisualStudio.chman -Verbose; `
#     Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile C:\TEMP\vs_buildtools.exe -Verbose; `
#     Start-Process -Wait -NoNewWindow -PassThru -FilePath C:\TEMP\vs_buildtools.exe -ArgumentList '--quiet', '--wait', '--norestart', '--nocache', `
#     '--channelUri', 'C:\TEMP\VisualStudio.chman', '--installChannelUri', 'C:\TEMP\VisualStudio.chman', `
#     '--add', 'Microsoft.VisualStudio.Workload.VCTools', `
#     '--add', 'Microsoft.VisualStudio.Component.Roslyn.Compiler', `
#     '--add', 'Microsoft.Component.MSBuild', `
#     '--add', 'Microsoft.Net.Component.4.5.2.TargetingPack', `
#     '--add', 'Microsoft.Net.Component.4.7.2.TargetingPack', `
#     '--add', 'Microsoft.NetCore.Component.Runtime.8.0', `
#     '--add', 'Microsoft.NetCore.Component.SDK', `
#     '--add', 'Microsoft.NetCore.Component.Runtime.6.0', `
#     '--add', 'microsoft.net.runtime.mono.tooling', `
#     '--add', 'microsoft.net.runtime.mono.tooling.net7', `
#     '--add', 'Microsoft.VisualStudio.Component.MonoDebugger', `
#     '--add', 'Microsoft.VisualStudio.Component.Merq', `
#     '--add', 'Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.TemplateEngine', `
#     '--add', 'Microsoft.VisualStudio.Component.VC.Tools.ARM64EC', `
#     '--add', 'Microsoft.VisualStudio.Component.UWP.VC.ARM64EC', `
#     '--add', 'Microsoft.Net.Component.3.5.DeveloperTools', `
#     '--add', 'Microsoft.NetCore.Component.Runtime.7.0', `
#     '--add', 'Microsoft.Net.Component.4.6.2.SDK', `
#     '--add', 'Microsoft.Net.Component.4.7.2.SDK', `
#     '--includeRecommended' | Out-Host

# # Install additional tools
# RUN Set-ExecutionPolicy Bypass -Scope Process -Force; `
#     [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
#     iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); `
#     choco install git cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'

# Clone the repositories
WORKDIR /app
RUN git clone https://github.com/tdlib/td.git; `
    cd td; `
    git clone https://github.com/Microsoft/vcpkg.git

# Install vcpkg packages for x64 & x86
WORKDIR /app/td/vcpkg
RUN Start-Process -Wait -NoNewWindow -PassThru -FilePath C:\app\td\vcpkg\bootstrap-vcpkg.bat; `
    Start-Process -Wait -NoNewWindow -PassThru -FilePath C:\app\td\vcpkg\vcpkg.exe -ArgumentList 'install', 'gperf:x64-windows', 'openssl:x64-windows', 'zlib:x64-windows', 'gperf:x86-windows', 'openssl:x86-windows', 'zlib:x86-windows';

# Build tdlib
WORKDIR /app/td
RUN foreach ($config in ('Release', 'Debug')) { `
    foreach ($arch in ('x64', 'x86')) { `
        Remove-Item -LiteralPath "build" -Force -Recurse -ErrorAction SilentlyContinue; `
        New-Item -ItemType Directory -Path "build"; `
        cd build; `
        cmake -A $arch -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/$arch/$config -DTD_ENABLE_DOTNET=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..; `
        cmake --build . --target install --config $config; `
        cd ..; `
    } `
}

# RUN Remove-Item -LiteralPath "build" -Force -Recurse -ErrorAction SilentlyContinue && `
#     New-Item -ItemType Directory -Path "build"
# WORKDIR /app/td/build

# RUN cmake -A x64 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/x64/Release -DTD_ENABLE_DOTNET=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..; `
#     cmake --build . --target install --config Release

# WORKDIR /app/td
# RUN Remove-Item -LiteralPath "build" -Force -Recurse -ErrorAction SilentlyContinue && ` 
#     New-Item -ItemType Directory -Path "build"
# WORKDIR /app/td/build

# RUN cmake -A x64 `
#     -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/x64/Debug `
#     -DTD_ENABLE_DOTNET=ON `
#     -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake .. && `
#     cmake --build . --target install --config Debug

# WORKDIR /app/td
# RUN Remove-Item -LiteralPath "build" -Force -Recurse -ErrorAction SilentlyContinue && `
#     New-Item -ItemType Directory -Path "build"
# WORKDIR /app/td/build

# RUN cmake -A Win32 `
#     -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/x86/Release `
#     -DTD_ENABLE_DOTNET=ON `
#     -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake .. && `
#     cmake --build . --target install --config Release

# WORKDIR /app/td
# RUN Remove-Item -LiteralPath "build" -Force -Recurse -ErrorAction SilentlyContinue && ` 
#     New-Item -ItemType Directory -Path "build"
# WORKDIR /app/td/build

# RUN cmake -A Win32 `
#     -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/x86/Debug `
#     -DTD_ENABLE_DOTNET=ON `
#     -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake .. && `
#     cmake --build . --target install --config Debug

# Display the contents of the tdlib directory
RUN dir tdlib

# Copy all built tdlibs
FROM mcr.microsoft.com/windows/nanoserver:ltsc2022
WORKDIR /app
COPY --from=builder /app/td/tdlib ./tdlib