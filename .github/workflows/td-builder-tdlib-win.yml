name: tdbuilder for tdlib for windows

on:
  schedule:
    - cron: '0 2 * * 5'

  workflow_dispatch:

jobs:

  prepare:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      
    - name: Setup Container
      run: |
        echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker pull ghcr.io/${{ github.actor }}/vstools:latest
        docker save ghcr.io/${{ github.actor }}/vstools:latest -o vstools.tar
      shell: pwsh

    - name: Upload Image Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: vstools-image
        path: vstools.tar

  build_release_x64:
    runs-on: windows-latest
    needs: [prepare]
    steps:

    - name: Download Image Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: vstools-image

    - name: Load Docker Image
      run: |
        docker load -i vstools.tar
      shell: pwsh
        
    - name: Build release x64
      run: |
        docker run --rm -v "${{ github.workspace }}:C:\app\td\tdlib\" ghcr.io/${{ github.actor }}/vstools:latest powershell.exe -c "
        cd /app/td;
        git fetch;
        git pull;
        Remove-Item -LiteralPath "build-release-x64" -Force -Recurse -ErrorAction SilentlyContinue;
        New-Item -ItemType Directory -Path "build-release-x64";
        cd build-release-x64;
        cmake -A x64 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/x64/Release -DTD_ENABLE_DOTNET=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..;
        cmake --build . --target install --config Release;
        "
      shell: pwsh

    - name: List folder
      run: dir "${{ github.workspace }}"
      shell: cmd
      
    - name: Publish the release x64 build
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-release-x64
        path: ${{ github.workspace }}/x64/Release

  build_debug_x64:
    runs-on: windows-latest
    needs: [prepare]
    steps:
    
    - name: Download Image Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: vstools-image
    
    - name: Load Docker Image
      run: |
        docker load -i vstools.tar
      shell: pwsh

    - name: Build debug x64
      run: |
        docker run --rm -v "${{ github.workspace }}:C:\app\td\tdlib\" ghcr.io/${{ github.actor }}/vstools:latest powershell.exe -c "
        cd /app/td;
        git fetch;
        git pull;
        Remove-Item -LiteralPath "build-debug-x64" -Force -Recurse -ErrorAction SilentlyContinue;
        New-Item -ItemType Directory -Path "build-debug-x64";
        cd build-debug-x64;
        cmake -A x64 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/x64/Debug -DTD_ENABLE_DOTNET=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..;
        cmake --build . --target install --config Debug;
        "
      shell: pwsh

    - name: List folder
      run: dir "${{ github.workspace }}"
      shell: cmd

    - name: Publish the debug x64 build
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-debug-x64
        path: ${{ github.workspace }}/x64/Debug

  build_release_x86:
    runs-on: windows-latest
    needs: [prepare]
    steps:

    - name: Download Image Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: vstools-image

    - name: Load Docker Image
      run: |
        docker load -i vstools.tar
      shell: pwsh

    - name: Build release x86
      run: |
        docker run --rm -v "${{ github.workspace }}:C:\app\td\tdlib\" ghcr.io/${{ github.actor }}/vstools:latest powershell.exe -c "
        cd /app/td;
        git fetch;
        git pull;
        Remove-Item -LiteralPath "build-release-x86" -Force -Recurse -ErrorAction SilentlyContinue;
        New-Item -ItemType Directory -Path "build-release-x86";
        cd build-release-x86;
        cmake -A Win32 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/Win32/Release -DTD_ENABLE_DOTNET=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..;
        cmake --build . --target install --config Release;
        "
      shell: pwsh

    - name: List folder
      run: dir "${{ github.workspace }}"
      shell: cmd

    - name: Publish the release x86 build
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-release-x86
        path: ${{ github.workspace }}/Win32/Release

  build_debug_x86:
    runs-on: windows-latest
    needs: [prepare]
    steps:

    - name: Download Image Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: vstools-image

    - name: Load Docker Image
      run: |
        docker load -i vstools.tar
      shell: pwsh

    - name: Build debug x86
      run: |
        docker run --rm -v "${{ github.workspace }}:C:\app\td\tdlib\" ghcr.io/${{ github.actor }}/vstools:latest powershell.exe -c "
        cd /app/td;
        git fetch;
        git pull;
        Remove-Item -LiteralPath "build-debug-x86" -Force -Recurse -ErrorAction SilentlyContinue;
        New-Item -ItemType Directory -Path "build-debug-x86";
        cd build-debug-x86;
        cmake -A Win32 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/Win32/Debug -DTD_ENABLE_DOTNET=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..;
        cmake --build . --target install --config Debug;
        "
      shell: pwsh

    - name: List folder
      run: dir "${{ github.workspace }}"
      shell: cmd

    - name: Publish the debug x86 build
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-debug-x86
        path: ${{ github.workspace }}/Win32/Debug

  final_step:
    runs-on: windows-latest
    needs: [build_release_x64, build_debug_x64, build_release_x86, build_debug_x86]
    steps:

    - name: Download release x64
      uses: actions/download-artifact@v4.1.8
      with:
        name: build-release-x64
        path: ${{ github.workspace }}/tdlib/x64/Release

    - name: Download debug x64
      uses: actions/download-artifact@v4.1.8
      with:
        name: build-debug-x64
        path: ${{ github.workspace }}/tdlib/x64/Debug

    - name: Download release x86
      uses: actions/download-artifact@v4.1.8
      with:
        name: build-release-x86
        path: ${{ github.workspace }}/tdlib/x86/Release

    - name: Download debug x86
      uses: actions/download-artifact@v4.1.8
      with:
        name: build-debug-x86
        path: ${{ github.workspace }}/tdlib/x86/Debug

    - name: Create folders and copy files from artifact
      run: |
        ls ${{ github.workspace }}
      shell: pwsh

    - name: Create docker
      run: |
        $dockerfileContent = @"
        FROM mcr.microsoft.com/windows/nanoserver:ltsc2022
        WORKDIR /app
        COPY ./tdlib ./tdlib
        "@

        $dockerfilePath = "${{ github.workspace }}/Dockerfile"
        $dockerfileContent | Out-File -FilePath $dockerfilePath

        docker build -t ghcr.io/${{ github.actor }}/tdlib-win:latest .

        echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/${{ github.actor }}/tdlib-win:latest
      shell: pwsh

  clean_artifacts:
    runs-on: windows-latest
    needs: [final_step]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Wait for Artifacts
      shell: pwsh
      run: Start-Sleep -Seconds 10
    
    - name: Clear all artifacts
      run: |
        for ($i = 1; $i -le 5; i++){
          $ARTIFACTS = gh api repos/${{ github.repository }}/actions/artifacts | ConvertFrom-Json;

          if ($ARTIFACTS.Count -gt 0) {
            break
          }

          Write-Host "Artifacts not found, retrying ($i/5)..."
          Start-Sleep -Seconds 5
        }

        if ($ARTIFACTS.Count -eq 0){
          Write-Host "No Artifacts found."
          exit 0
        }
          
        $ARTIFACTS = gh api repos/${{ github.repository }}/actions/artifacts | ConvertFrom-Json;
        foreach ($ARTIFACT in $ARTIFACTS.artifacts) {
          gh api -X DELETE repos/${{ github.repository }}/actions/artifacts/$($ARTIFACT.id)
          Write-Host "Delete artifact: $($ARTIFACT.name) (ID: $($ARTIFACT.id))"
        }
      shell: pwsh
      env: 
        GH_TOKEN: ${{ secrets.TOKEN }}

    - name: Commit code
      shell: bash
      run: |
        git fetch
        git pull
        echo "$(date -u)" >> tdlib-win.log
        git config --global user.name "Kishan"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add tdlib-win.log
        git commit -m "Update tdlib-win.log" || echo "no change to commit"
        git push origin HEAD
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
