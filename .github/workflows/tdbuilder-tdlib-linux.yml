name: tdbuilder for tdlib for linux

on:
  schedule:
    - cron: '0 5 * * 5'
    
  workflow_dispatch:

jobs:

  prepare:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Setup Container
      shell: bash
      run: |
        echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker pull ghcr.io/${{ github.actor }}/linuxtools:latest
        docker save ghcr.io/${{ github.actor }}/linuxtools:latest -o linuxtools.tar

    - name: Upload Image Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: linuxtools-image
        path: linuxtools.tar

  build_release:
    runs-on: ubuntu-latest
    needs: [prepare]

    steps:
    - name: Download Image Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: linuxtools-image

    - name: Load Docker Image
      run: docker load -i linuxtools.tar
      shell: pwsh

    - name: Build release
      run: |
        docker run --rm -v "${{ github.workspace }}:/app/td/tdlib" ghcr.io/${{ github.actor }}/linuxtools:latest bash -c "
        apt update && apt upgrade -y
        clangVersion=\$(clang --version | awk 'NR==1 {split($4, a, \".\"); print a[1]}')
        echo \$clangVersion
        cd /app/td
        git fetch
        git pull
        rm -rf build_release && mkdir build_release && cd build_release
        CXXFLAGS=\"-stdlib=libc++\" CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/Release -DTD_ENABLE_LTO=ON -DCMAKE_AR=/usr/bin/llvm-ar-\$clangVersion -DCMAKE_NM=/usr/bin/llvm-nm-\$clangVersion -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-\$clangVersion -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-\$clangVersion ..
        cmake --build . --target install
        "
      shell: bash

    - name: List folder
      run: ls "${{ github.workspace }}"
      shell: bash

    - name: Publish the release build
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-release
        path: ${{ github.workspace }}/Release

  build_debug:
    runs-on: ubuntu-latest
    needs: [prepare]

    steps:
    - name: Download Image Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: linuxtools-image

    - name: Load Docker Image
      run: docker load -i linuxtools.tar
      shell: pwsh

    - name: Build debug
      run: |
        docker run --rm -v "${{ github.workspace }}:/app/td/tdlib" ghcr.io/${{ github.actor }}/linuxtools:latest bash -c "
        apt update && apt upgrade -y
        clangVersion=\$(clang --version | awk 'NR==1 {split(\$4, a, \".\"); print a[1]}')
        echo \$clangVersion
        cd /app/td
        git fetch
        git pull
        rm -rf build_debug && mkdir build_debug && cd build_debug
        CXXFLAGS=\"-stdlib=libc++\" CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX:PATH=../tdlib/Debug -DTD_ENABLE_LTO=ON -DCMAKE_AR=/usr/bin/llvm-ar-\$clangVersion -DCMAKE_NM=/usr/bin/llvm-nm-\$clangVersion -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-\$clangVersion -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-\$clangVersion ..
        cmake --build . --target install
        "
      shell: bash

    - name: List folder
      run: ls "${{ github.workspace }}"
      shell: bash

    - name: Publish the debug build
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-debug
        path: ${{ github.workspace }}/Debug

  final_step:
    runs-on: ubuntu-latest
    needs: [build_release, build_debug]

    steps:
    - name: Download release
      uses: actions/download-artifact@v4.1.8
      with:
        name: build-release
        path: ${{ github.workspace }}/tdlib/Release

    - name: Download debug
      uses: actions/download-artifact@v4.1.8
      with:
        name: build-debug
        path: ${{ github.workspace }}/tdlib/Debug

    - name: List folder
      run: ls ${{ github.workspace }}
      shell: bash

    - name: Create docker
      run: |
        $dockerfileContent = @"
        FROM alpine
        WORKDIR /app
        COPY ./tdlib ./tdlib
        "@

        $dockerfilePath = "${{ github.workspace }}/Dockerfile"
        echo "$dockerfileContent" > "$dockerfilePath"

        docker build -t ghcr.io/${{ github.actor }}/tdlib-linux:latest .

        echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/${{ github.actor }}/tdlib-linux:latest
      shell: pwsh
      

  clean_artifacts:
    runs-on: ubuntu-latest
    needs: [final_step]
    permissions:
      contents: write

    steps:

    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Wait for Artifacts
      shell: bash
      run: sleep 10

    - name: Clear all artifacts
      run: |
        for i in {1..5}; do
          ARTIFACTS=$(gh api repos/${{ github.repository }}/actions/artifacts | jq -r '.artifacts')
          
          if [ -n "$ARTIFACTS" ] && [ "$ARTIFACTS" != "[]" ]; then
            break
          fi

          echo "Artifacts not found, retrying ($i/5)..."
          sleep 5
        done

        if [ -z "$ARTIFACTS" ] || [ "$ARTIFACTS" == "[]" ]; then
          echo "No Artifacts found."
          exit 0
        fi
          
        ARTIFACT_IDS=$(echo "$ARTIFACTS" | jq -r '.[].id')
        for ID in $ARTIFACT_IDS; do
          gh api -X DELETE repos/${{ github.repository }}/actions/artifacts/$ID
          echo "Deleted artifact with ID: $ID"
        done
      shell: bash
      env: 
        GH_TOKEN: ${{ secrets.TOKEN }}
    
    - name: Commit code
      shell: bash
      run: |
        echo "$(date -u)" >> tdlib-linux.log
        git config --global user.name "Kishan"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add tdlib-linux.log
        git commit -m "Update tdlib-linux.log" || echo "no change to commit"
        git push origin HEAD
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        
